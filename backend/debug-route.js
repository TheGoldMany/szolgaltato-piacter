// backend/debug-routes.js - ROUTE HIBAKERES√âS

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç ROUTE PATTERN HIBAKERES√âS');
console.log('==========================================');

// Tesztelj√ºk egyes√©vel a route f√°jlokat
const routeFiles = ['auth.js', 'profiles.js', 'upload.js'];

function findBadRoutePatterns(filename) {
  console.log(`\nüß™ Ellen≈ërz√©s: ${filename}`);
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  const filePath = path.join(__dirname, 'routes', filename);
  
  if (!fs.existsSync(filePath)) {
    console.log(`‚ùå F√°jl nem tal√°lhat√≥: ${filename}`);
    return;
  }
  
  const content = fs.readFileSync(filePath, 'utf8');
  const lines = content.split('\n');
  
  let foundIssues = false;
  
  lines.forEach((line, index) => {
    const lineNum = index + 1;
    const trimmedLine = line.trim();
    
    // Ha tartalmaz router defin√≠ci√≥t
    if (trimmedLine.includes('router.') && (trimmedLine.includes('get') || trimmedLine.includes('post') || trimmedLine.includes('put') || trimmedLine.includes('delete'))) {
      
      // Hib√°s pattern-ek keres√©se:
      
      // 1. √úres param√©ter (pl. router.get('/:', ...) vagy router.get('/:/', ...))
      if (trimmedLine.match(/['"`][^'"`]*:(?:\s*['"`]|\/)/)) {
        console.log(`üö® Sor ${lineNum}: √úRES PARAM√âTER`);
        console.log(`   ${trimmedLine}`);
        console.log(`   ‚Ü≥ Probl√©m√°s pattern: √ºres param√©ter n√©v a : ut√°n`);
        foundIssues = true;
      }
      
      // 2. Hib√°s param√©ter karakterek (pl. router.get('/:123', ...) vagy router.get('/:!', ...))
      if (trimmedLine.match(/['"`][^'"`]*:[^a-zA-Z_][^'"`\/]*/)) {
        console.log(`üö® Sor ${lineNum}: HIB√ÅS PARAM√âTER KARAKTER`);
        console.log(`   ${trimmedLine}`);
        console.log(`   ‚Ü≥ Probl√©m√°s pattern: param√©ter n√©v √©rv√©nytelen karakterrel kezd≈ëdik`);
        foundIssues = true;
      }
      
      // 3. Dupla kett≈ëspont (pl. router.get('/::id', ...))
      if (trimmedLine.match(/['"`][^'"`]*::[^'"`]*/)) {
        console.log(`üö® Sor ${lineNum}: DUPLA KETT≈êSPONT`);
        console.log(`   ${trimmedLine}`);
        console.log(`   ‚Ü≥ Probl√©m√°s pattern: dupla :: a route-ban`);
        foundIssues = true;
      }
      
      // 4. Hi√°nyz√≥ z√°r√≥ id√©z≈ëjel vagy aposztr√≥f
      const quoteMatches = trimmedLine.match(/['"`]/g);
      if (quoteMatches && quoteMatches.length % 2 !== 0) {
        console.log(`üö® Sor ${lineNum}: HI√ÅNYZ√ì Z√ÅR√ì ID√âZ≈êJEL`);
        console.log(`   ${trimmedLine}`);
        console.log(`   ‚Ü≥ Probl√©m√°s pattern: p√°ratlan sz√°m√∫ id√©z≈ëjel`);
        foundIssues = true;
      }
      
      // 5. Route-ok list√°z√°sa (minden route)
      console.log(`üìç Sor ${lineNum}: ${trimmedLine}`);
    }
  });
  
  if (!foundIssues) {
    console.log(`‚úÖ ${filename} - Nem tal√°ltam hib√°s route pattern-eket`);
  } else {
    console.log(`‚ùå ${filename} - HIB√ÅS PATTERN-EK TAL√ÅLHAT√ìK!`);
  }
}

// Minden route f√°jl ellen≈ërz√©se
routeFiles.forEach(findBadRoutePatterns);

console.log('\nüîß LEHETS√âGES MEGOLD√ÅSOK:');
console.log('==========================================');
console.log('1. Jav√≠tsd a hib√°s route pattern-eket');
console.log('2. Gy≈ëz≈ëdj meg r√≥la, hogy minden param√©ter nev√©nek bet≈±vel kell kezd≈ëdnie');
console.log('3. Ellen≈ërizd, hogy minden id√©z≈ëjel/aposztr√≥f le van-e z√°rva');
console.log('4. Ker√ºld a dupla kett≈ëspontokat (::)');
console.log('5. Ne haszn√°lj √ºres param√©tereket (pl. /:/)');

process.exit(0);