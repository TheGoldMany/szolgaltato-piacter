// backend/generate-jwt-secret.js
const crypto = require('crypto');

console.log('üîê JWT SECRET GENER√ÅTOR');
console.log('==========================================');

// M√≥dszer 1: Node.js crypto modul
const secret1 = crypto.randomBytes(64).toString('hex');
console.log('\n1Ô∏è‚É£ Crypto Random (64 bytes hex):');
console.log(`JWT_SECRET=${secret1}`);

// M√≥dszer 2: Base64 k√≥dol√°s
const secret2 = crypto.randomBytes(48).toString('base64');
console.log('\n2Ô∏è‚É£ Base64 Random (48 bytes):');
console.log(`JWT_SECRET=${secret2}`);

// M√≥dszer 3: Egyszer≈± UUID kombin√°ci√≥
const uuid1 = crypto.randomUUID();
const uuid2 = crypto.randomUUID();
const secret3 = `corvus_${uuid1}_${uuid2}`.replace(/-/g, '');
console.log('\n3Ô∏è‚É£ UUID alap√∫:');
console.log(`JWT_SECRET=${secret3}`);

// M√≥dszer 4: Timestamp + Random
const timestamp = Date.now().toString();
const randomPart = crypto.randomBytes(16).toString('hex');
const secret4 = `corvus_platform_${timestamp}_${randomPart}`;
console.log('\n4Ô∏è‚É£ Timestamp + Random:');
console.log(`JWT_SECRET=${secret4}`);

console.log('\n‚úÖ V√°lassz egyet √©s m√°sold be a .env f√°jlba!');
console.log('üí° Tip: A #1 vagy #2 a legbiztons√°gosabb production-h√∂z');

// Bonus: .env template
console.log('\nüìã TELJES .env TEMPLATE:');
console.log('==========================================');
console.log(`NODE_ENV=development
PORT=5000
JWT_SECRET=${secret1}
JWT_EXPIRES_IN=7d`);

console.log('\nüéØ M√°sold ezt a backend/.env f√°jlba!');